// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: proto/login_info.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RateLimiter_Authorize_FullMethodName           = "/api.RateLimiter/Authorize"
	RateLimiter_ResetBucket_FullMethodName         = "/api.RateLimiter/ResetBucket"
	RateLimiter_AddToWhitelist_FullMethodName      = "/api.RateLimiter/AddToWhitelist"
	RateLimiter_RemoveFromWhitelist_FullMethodName = "/api.RateLimiter/RemoveFromWhitelist"
	RateLimiter_AddToBlacklist_FullMethodName      = "/api.RateLimiter/AddToBlacklist"
	RateLimiter_RemoveFromBlacklist_FullMethodName = "/api.RateLimiter/RemoveFromBlacklist"
)

// RateLimiterClient is the client API for RateLimiter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The AuthService defines the available methods.
type RateLimiterClient interface {
	Authorize(ctx context.Context, in *AuthorizeRequest, opts ...grpc.CallOption) (*AuthorizeResponse, error)
	ResetBucket(ctx context.Context, in *ResetBucketRequest, opts ...grpc.CallOption) (*ResetBucketResponse, error)
	AddToWhitelist(ctx context.Context, in *AddToWhitelistRequest, opts ...grpc.CallOption) (*AddToWhitelistResponse, error)
	RemoveFromWhitelist(ctx context.Context, in *RemoveFromWhitelistRequest, opts ...grpc.CallOption) (*RemoveFromWhitelistResponse, error)
	AddToBlacklist(ctx context.Context, in *AddToBlacklistRequest, opts ...grpc.CallOption) (*AddToBlacklistResponse, error)
	RemoveFromBlacklist(ctx context.Context, in *RemoveFromBlacklistRequest, opts ...grpc.CallOption) (*RemoveFromBlacklistResponse, error)
}

type rateLimiterClient struct {
	cc grpc.ClientConnInterface
}

func NewRateLimiterClient(cc grpc.ClientConnInterface) RateLimiterClient {
	return &rateLimiterClient{cc}
}

func (c *rateLimiterClient) Authorize(ctx context.Context, in *AuthorizeRequest, opts ...grpc.CallOption) (*AuthorizeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthorizeResponse)
	err := c.cc.Invoke(ctx, RateLimiter_Authorize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateLimiterClient) ResetBucket(ctx context.Context, in *ResetBucketRequest, opts ...grpc.CallOption) (*ResetBucketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResetBucketResponse)
	err := c.cc.Invoke(ctx, RateLimiter_ResetBucket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateLimiterClient) AddToWhitelist(ctx context.Context, in *AddToWhitelistRequest, opts ...grpc.CallOption) (*AddToWhitelistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddToWhitelistResponse)
	err := c.cc.Invoke(ctx, RateLimiter_AddToWhitelist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateLimiterClient) RemoveFromWhitelist(ctx context.Context, in *RemoveFromWhitelistRequest, opts ...grpc.CallOption) (*RemoveFromWhitelistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveFromWhitelistResponse)
	err := c.cc.Invoke(ctx, RateLimiter_RemoveFromWhitelist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateLimiterClient) AddToBlacklist(ctx context.Context, in *AddToBlacklistRequest, opts ...grpc.CallOption) (*AddToBlacklistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddToBlacklistResponse)
	err := c.cc.Invoke(ctx, RateLimiter_AddToBlacklist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateLimiterClient) RemoveFromBlacklist(ctx context.Context, in *RemoveFromBlacklistRequest, opts ...grpc.CallOption) (*RemoveFromBlacklistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveFromBlacklistResponse)
	err := c.cc.Invoke(ctx, RateLimiter_RemoveFromBlacklist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RateLimiterServer is the server API for RateLimiter service.
// All implementations must embed UnimplementedRateLimiterServer
// for forward compatibility.
//
// The AuthService defines the available methods.
type RateLimiterServer interface {
	Authorize(context.Context, *AuthorizeRequest) (*AuthorizeResponse, error)
	ResetBucket(context.Context, *ResetBucketRequest) (*ResetBucketResponse, error)
	AddToWhitelist(context.Context, *AddToWhitelistRequest) (*AddToWhitelistResponse, error)
	RemoveFromWhitelist(context.Context, *RemoveFromWhitelistRequest) (*RemoveFromWhitelistResponse, error)
	AddToBlacklist(context.Context, *AddToBlacklistRequest) (*AddToBlacklistResponse, error)
	RemoveFromBlacklist(context.Context, *RemoveFromBlacklistRequest) (*RemoveFromBlacklistResponse, error)
	mustEmbedUnimplementedRateLimiterServer()
}

// UnimplementedRateLimiterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRateLimiterServer struct{}

func (UnimplementedRateLimiterServer) Authorize(context.Context, *AuthorizeRequest) (*AuthorizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authorize not implemented")
}
func (UnimplementedRateLimiterServer) ResetBucket(context.Context, *ResetBucketRequest) (*ResetBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetBucket not implemented")
}
func (UnimplementedRateLimiterServer) AddToWhitelist(context.Context, *AddToWhitelistRequest) (*AddToWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToWhitelist not implemented")
}
func (UnimplementedRateLimiterServer) RemoveFromWhitelist(context.Context, *RemoveFromWhitelistRequest) (*RemoveFromWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromWhitelist not implemented")
}
func (UnimplementedRateLimiterServer) AddToBlacklist(context.Context, *AddToBlacklistRequest) (*AddToBlacklistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToBlacklist not implemented")
}
func (UnimplementedRateLimiterServer) RemoveFromBlacklist(context.Context, *RemoveFromBlacklistRequest) (*RemoveFromBlacklistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromBlacklist not implemented")
}
func (UnimplementedRateLimiterServer) mustEmbedUnimplementedRateLimiterServer() {}
func (UnimplementedRateLimiterServer) testEmbeddedByValue()                     {}

// UnsafeRateLimiterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RateLimiterServer will
// result in compilation errors.
type UnsafeRateLimiterServer interface {
	mustEmbedUnimplementedRateLimiterServer()
}

func RegisterRateLimiterServer(s grpc.ServiceRegistrar, srv RateLimiterServer) {
	// If the following call pancis, it indicates UnimplementedRateLimiterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RateLimiter_ServiceDesc, srv)
}

func _RateLimiter_Authorize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimiterServer).Authorize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RateLimiter_Authorize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimiterServer).Authorize(ctx, req.(*AuthorizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateLimiter_ResetBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimiterServer).ResetBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RateLimiter_ResetBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimiterServer).ResetBucket(ctx, req.(*ResetBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateLimiter_AddToWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimiterServer).AddToWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RateLimiter_AddToWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimiterServer).AddToWhitelist(ctx, req.(*AddToWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateLimiter_RemoveFromWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFromWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimiterServer).RemoveFromWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RateLimiter_RemoveFromWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimiterServer).RemoveFromWhitelist(ctx, req.(*RemoveFromWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateLimiter_AddToBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToBlacklistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimiterServer).AddToBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RateLimiter_AddToBlacklist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimiterServer).AddToBlacklist(ctx, req.(*AddToBlacklistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateLimiter_RemoveFromBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFromBlacklistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimiterServer).RemoveFromBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RateLimiter_RemoveFromBlacklist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimiterServer).RemoveFromBlacklist(ctx, req.(*RemoveFromBlacklistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RateLimiter_ServiceDesc is the grpc.ServiceDesc for RateLimiter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RateLimiter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.RateLimiter",
	HandlerType: (*RateLimiterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authorize",
			Handler:    _RateLimiter_Authorize_Handler,
		},
		{
			MethodName: "ResetBucket",
			Handler:    _RateLimiter_ResetBucket_Handler,
		},
		{
			MethodName: "AddToWhitelist",
			Handler:    _RateLimiter_AddToWhitelist_Handler,
		},
		{
			MethodName: "RemoveFromWhitelist",
			Handler:    _RateLimiter_RemoveFromWhitelist_Handler,
		},
		{
			MethodName: "AddToBlacklist",
			Handler:    _RateLimiter_AddToBlacklist_Handler,
		},
		{
			MethodName: "RemoveFromBlacklist",
			Handler:    _RateLimiter_RemoveFromBlacklist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/login_info.proto",
}
